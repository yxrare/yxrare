
# ---------------- Imports --------------------
import requests
import numpy as np
import pandas as pd
from scipy.optimize import minimize
import matplotlib.pyplot as plt
import time
import hashlib

# ---------------- Configurations --------------
WEATHERSTACK_API_KEY = "15834bcc9da787f1c7c0c5c7b8a76d37"
CITIES = ["Berlin", "London", "Paris", "New York", "Tokyo", "Frankfurt", "Munich"]
BASE_FARE = 10.0  # € base fare
THRESHOLDS = (1.2, 0.8)  # Demand/Supply ratio thresholds for surge
CAPS = (3.0, 0.8)  # Surge caps (max, min)
WEATHERSTACK_BASE_URL = "http://api.weatherstack.com/current"
REQUEST_HEADERS = {
    "User-Agent": "RideHailingPricing/3.0",
    "Accept": "application/json"
}

# ---------------- Helper Functions --------------

def get_weather(city):
    """
    Robust weather data fetching with simplified parameters.
    """
    params = {
        "access_key": WEATHERSTACK_API_KEY,
        "query": city,
        "units": "m"  # Remove language parameter to avoid errors
    }
    try:
        res = requests.get(
            WEATHERSTACK_BASE_URL,
            params=params,
            headers=REQUEST_HEADERS,
            timeout=10
        )
        res.raise_for_status()
        data = res.json()
        
        # Check for API errors
        if data.get("error"):
            error_info = data["error"].get("info", "Unknown API error")
            raise ValueError(f"{error_info}")
        
        # Safe data extraction
        current_data = data.get("current", {})
        temp = current_data.get("temperature", 20.0)  # Default 20°C
        conditions = current_data.get("weather_descriptions", ["Clear"])
        condition = conditions[0] if conditions else "Clear"
        
        return temp, condition
    except Exception as e:
        print(f"[WARN] Weather API failed for {city}: {str(e)}")
        return 20.0, "Clear"  # Fallback values


def simulate_real_time(city):
    """
    Unique demand/supply simulation with economic consistency.
    """
    # Create unique seed per city and minute
    time_seed = int(time.time()) // 60  # Change every minute
    city_seed = int(hashlib.sha256(city.encode()).hexdigest(), 16) % 10**8
    np.random.seed((time_seed + city_seed) % 10**8)
    
    # Simulate realistic demand/supply with correlation
    base_demand = np.random.randint(3000, 10000)
    weather_effect = np.random.uniform(0.8, 1.2)
    supply = int(base_demand * np.random.uniform(0.6, 1.4))
    
    return int(base_demand * weather_effect), supply


def compute_surge(demand, supply):
    """
    Compute surge multiplier with smoothing.
    """
    ratio = demand / max(supply, 1)
    if ratio > THRESHOLDS[0]:
        # Smooth surge between threshold and cap
        surge = 1.0 + min(CAPS[0] - 1.0, (ratio - THRESHOLDS[0]) * 0.5)
        return round(surge, 2)
    elif ratio < THRESHOLDS[1]:
        surge = 1.0 - min(1.0 - CAPS[1], (THRESHOLDS[1] - ratio) * 0.3)
        return round(surge, 2)
    return 1.0


def estimate_demand(base_demand, base_price, total_price, elasticity):
    """
    Economically accurate demand estimation.
    """
    return base_demand * (total_price / base_price) ** elasticity


def optimize_price(base_demand, base_price, elasticity, surge):
    """
    Correct revenue optimization using fundamental economics.
    """
    def actual_revenue(p):
        total_price = p * surge
        adjusted_demand = estimate_demand(base_demand, base_price, total_price, elasticity)
        return - (total_price * adjusted_demand)  # Negative for minimization

    # Realistic price bounds
    result = minimize(actual_revenue, x0=[base_price], 
                     bounds=[(0.8 * base_price, 2.5 * base_price)])
    return float(result.x)


# ---------------- Main Pricing Engine --------------------

def dynamic_pricing_cycle():
    """
    Run dynamic pricing with accurate economic modeling.
    """
    results = []
    print("\n🌐 Running Dynamic Pricing Cycle...")
    print("====================================")
    
    for i, city in enumerate(CITIES):
        # Get weather with API call spacing
        if i > 0:
            time.sleep(1.0)  # Prevent API rate limiting
        try:
            temp, weather = get_weather(city)
        except Exception as e:
            print(f"[CRITICAL] Weather failed for {city}, using defaults: {e}")
            temp, weather = 20.0, "Clear"
        
        # Get unique demand/supply per city
        demand, supply = simulate_real_time(city)
        elasticity = -abs(np.random.uniform(0.3, 1.8))  # Realistic elasticity range

        surge = compute_surge(demand, supply)
        optimized_fare = optimize_price(demand, BASE_FARE, elasticity, surge)
        total_price = optimized_fare * surge

        # Correct demand and revenue calculation
        adjusted_demand = estimate_demand(demand, BASE_FARE, total_price, elasticity)
        revenue_before = BASE_FARE * demand
        revenue_after = total_price * adjusted_demand

        results.append({
            "City": city,
            "Weather": weather,
            "Temp(°C)": round(temp, 1),
            "Demand": demand,
            "Supply": supply,
            "Ratio": round(demand / max(supply, 1), 2),
            "Elasticity": round(elasticity, 2),
            "Surge": surge,
            "Base Price(€)": round(optimized_fare, 2),
            "Total Price(€)": round(total_price, 2),
            "Revenue Before(€)": round(revenue_before, 2),
            "Revenue After(€)": round(revenue_after, 2),
            "Revenue Change(%)": round((revenue_after - revenue_before) / revenue_before * 100, 1)
        })

        print(f"📍 {city}: {weather} {temp}°C | D/S: {demand}/{supply} (Ratio: {results[-1]['Ratio']:.2f})")
        print(f"   → Elasticity: {elasticity:.2f} | Surge: ×{surge:.2f}")
        print(f"   → Pricing: Base €{optimized_fare:.2f} | Total €{total_price:.2f}")
        print(f"   → Revenue: €{revenue_before:,.0f} → €{revenue_after:,.0f} ({results[-1]['Revenue Change(%)']}%)\n")

    df = pd.DataFrame(results)
    return df


# ---------------- Enhanced Visualization --------------------

def plot_results(df):
    """
    Comprehensive visualization of pricing and revenue impact.
    """
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 15))
    
    # Price comparison
    ax1.bar(df["City"], df["Total Price(€)"], color="royalblue", alpha=0.7, label="Total Price")
    ax1.bar(df["City"], df["Base Price(€)"], color="skyblue", alpha=0.7, label="Base Price")
    ax1.axhline(BASE_FARE, color="red", linestyle="--", label="Base Fare")
    ax1.set_title("Optimized Pricing Across Cities", fontsize=14)
    ax1.set_ylabel("Price (€)", fontsize=12)
    ax1.legend()
    
    # Add price labels
    for i, row in df.iterrows():
        ax1.text(i, row["Total Price(€)"] + 1, f'€{row["Total Price(€)"]:.1f}', 
                ha='center', va='bottom', fontsize=9)
        ax1.text(i, row["Base Price(€)"]/2, f'€{row["Base Price(€)"]:.1f}×{row["Surge"]:.1f}', 
                ha='center', va='center', fontsize=8)
    
    # Revenue impact
    colors = ['#2ecc71' if x >= 0 else '#e74c3c' for x in df["Revenue Change(%)"]]
    ax2.bar(df["City"], df["Revenue Change(%)"], color=colors, alpha=0.7)
    ax2.axhline(0, color="black", linewidth=0.8)
    ax2.set_title("Revenue Impact", fontsize=14)
    ax2.set_ylabel("Revenue Change (%)", fontsize=12)
    
    # Add percentage labels
    for i, val in enumerate(df["Revenue Change(%)"]):
        ax2.text(i, val + (1 if val >= 0 else -3), 
                 f'{val:.1f}%', ha='center', fontsize=9,
                 color='black' if abs(val) < 10 else 'white')
    
    # Demand-supply dynamics
    width = 0.35
    x = np.arange(len(df))
    ax3.bar(x - width/2, df["Demand"], width, label='Demand', color='#3498db')
    ax3.bar(x + width/2, df["Supply"], width, label='Supply', color='#f39c12')
    ax3.set_title("Demand-Supply Dynamics", fontsize=14)
    ax3.set_ylabel("Number of Rides", fontsize=12)
    ax3.set_xticks(x)
    ax3.set_xticklabels(df["City"])
    ax3.legend()
    
    # Add ratio labels
    for i, row in df.iterrows():
        ax3.text(i, max(row["Demand"], row["Supply"]) + 500, 
                f'Ratio: {row["Ratio"]:.2f}', ha='center', fontsize=9)
    
    plt.tight_layout()
    plt.show()


# ---------------- Run Program --------------------

if __name__ == "__main__":
    print("\n🚕 Dynamic Pricing Engine 3.0 (Economically Accurate) 🚕")
    print("=========================================================")
    start_time = time.time()
    df_results = dynamic_pricing_cycle()
    runtime = time.time() - start_time
    
    print(f"\n⏱️  Processed {len(CITIES)} cities in {runtime:.2f} seconds")
    print("\n📊 Final Pricing Analysis:")
    print(df_results[["City", "Weather", "Temp(°C)", "Ratio", "Surge", 
                     "Base Price(€)", "Total Price(€)", "Revenue Change(%)"]])
    
    print("\n📈 Generating visualizations...")
    plot_results(df_results)
